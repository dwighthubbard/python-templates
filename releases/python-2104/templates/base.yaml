# Copyright 2021, Oath Inc.
# Licensed under the terms of the Apache 2.0 license.  See the LICENSE file in the project root for terms
namespace: python-2104
name: base
version: "2021.5.3"
description: 'Base template definition for python-2104 namespace templates'
maintainer: 54983+dwighthubbard@users.noreply.github.com
images:
    manylinux2014: quay.io/pypa/manylinux2014_x86_64
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    manylinux1_32: quay.io/pypa/manylinux1_i686
    manylinux1_64: quay.io/pypa/manylinux1_x86_64
    ubuntu: ubuntu:latest
config:
    image: manylinux2014
    environment:
        BASE_PYTHON: /opt/python/cp39-cp39/bin/python3.9
        LANG: en_US.UTF-8
    steps:
        - begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
        - init_os: |
            sd-cmd exec python-2104/python_bootstrap
            . $SD_ARTIFACTS_DIR/env/python_bootstrap.env||/bin/true
        - setup_deploy_keys: |
            if [ ! -z "$GIT_DEPLOY_KEY" ]; then
                pypirun screwdrivercd screwdrivercd_ssh_setup
                eval "$(ssh-agent -s)"
                pypirun screwdrivercd screwdrivercd_github_deploykey
            fi
        - install_dependencies: $BASE_PYTHON -m screwdrivercd.installdeps
        - determine_git_repo: |
            determine_repo() {
                git_remote_url="`git remote -v|grep ^origin|grep "(push)\$"|awk '{print $2}'`"
                case "$git_remote_url" in
                    *git@* ) export GIT_REPO="`echo $git_remote_url|cut -d":" -f 2|sed "s/\.git//"`";;
                    *http* ) export GIT_REPO="`echo $git_remote_url|cut -d"/" -f 4-5|sed "s/\.git//"`";;
                esac
            }
            if [ "$GIT_REPO" = "" ]; then
                determine_repo
                echo "Git repo has been set to $GIT_REPO"
            fi
        - set_package_env: |
            $BASE_PYTHON << EOF
            import distutils.errors
            import logging
            import os
            import sys
            from pkg_resources import safe_name
            from setuptools.config import read_configuration
            def package_dir(conf_dict):
                pdir = '.'
                for dirname in ['src']:
                    if os.path.exists(dirname):
                        pdir = dirname
                        break
                try:
                    conf_dict = read_configuration("setup.cfg")
                except distutils.errors.DistutilsFileError:
                    return pdir
                conf_options = conf_dict.get('options', {})
                conf_metadata = conf_dict.get('metadata', {})
                if conf_options and conf_options.get('package_dir', {}):
                    pdir =  list(conf_options['package_dir'].values())[0]
                elif pdir == '.' and 'name' in conf_metadata.keys() and os.path.exists(conf_metadata["name"]):
                    return conf_metadata['name']
                return pdir
            conf_dict = {
                'metadata': {
                    'name': 'unknown',
                    'version': 'unknown',
                }
            }
            try:
                conf_dict.update(read_configuration("setup.cfg"))
            except distutils.errors.DistutilsFileError:
                logging.debug('The setup.cfg configuration file not found, cannot determine package name and version')
            artifact_dir = os.environ.get('SD_ARTIFACTS_DIR', 'artifacts')
            env_dir = f'{artifact_dir}/env'
            env_filename = f'{env_dir}/package.env'
            os.makedirs(env_dir, exist_ok=True)
            with open(env_filename, 'w') as env_handle:
                env_handle.write(f'PACKAGE_NAME="{safe_name(conf_dict["metadata"]["name"])}"\n')
                env_handle.write(f'PACKAGE_VERSION="{conf_dict["metadata"]["version"]}"\n')
                env_handle.write(f'PACKAGE_DIR="{package_dir(conf_dict)}"\n')
                env_handle.write('export PACKAGE_NAME\n')
                env_handle.write('export PACKAGE_VERSION\n')
                env_handle.write('export PACKAGE_DIR\n')
            EOF
            . $SD_ARTIFACTS_DIR/env/package.env
        - config_preset: echo "Configuration preset handler"
        - update_version: $BASE_PYTHON -m screwdrivercd.version
        - end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
        - teardown-store_artifacts: |
            $BASE_PYTHON << EOF
            import glob
            import os
            import shutil
            import sys
            CONFIGFILES = ['.bandit.ini', 'bandit.ini', '.coveragerc', 'coveragerc', 'MANIFEST.in', 'pyproject.toml', 'requirements.txt', 'setup.cfg', 'setup.py', '.pylintrc', 'pylintrc', 'tox.ini'] + glob.glob('*.ini')
            if 'PYLINTRC' in os.environ.keys():
                CONFIGFILES.append(os.environ['PYLINTRC'])
            LOGFILES = glob.glob('*.log') + glob.glob('.tox/log/*.log') + glob.glob('.tox/*/log/*.log')
            artifacts_dir = os.environ.get("SD_ARTIFACTS_DIR", ".")
            config_dir = os.path.join(artifacts_dir, 'config')
            log_dir = os.path.join(artifacts_dir, 'logs')
            report_dir = os.path.join(artifacts_dir, 'reports')
            os.makedirs(config_dir, exist_ok=True)
            os.makedirs(log_dir, exist_ok=True)
            os.makedirs(report_dir, exist_ok=True)
            if os.path.exists('artifacts') and artifacts_dir != '.':
                print(f'Copying artifacts -> {artifacts_dir}', flush=True)
                try:
                    shutil.copytree('artifacts', artifacts_dir, dirs_exist_ok=True)
                except TypeError:
                    try:
                        shutil.copytree('artifacts', artifacts_dir)
                    except FileExistsError:
                        pass
            for configfile in CONFIGFILES:
                if os.path.exists(configfile):
                    print(f'Copying config file {configfile} -> {config_dir}', flush=True)
                    shutil.copy(configfile, os.path.join(config_dir, configfile))
            for logfile in LOGFILES:
                dirpath = os.path.dirname(logfile)
                destdir = log_dir
                if dirpath:
                    destdir = os.path.join(log_dir, dirpath)
                    os.makedirs(destdir, exist_ok=True)
                if os.path.exists(logfile):
                    print(f'Copying log file {logfile} -> {destdir}', flush=True)
                    shutil.copy(logfile, destdir)
            EOF
